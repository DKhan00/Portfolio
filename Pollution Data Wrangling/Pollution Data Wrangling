{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ca46f88",
   "metadata": {},
   "source": [
    "# Danish Khan\n",
    "### Term Project\n",
    "### DSC 540 Data Preparation\n",
    "### 12/30/2023"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6894a5e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import sqlite3\n",
    "from sqlalchemy import create_engine\n",
    "import matplotlib.pyplot as mpl"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "613c2b5d",
   "metadata": {},
   "source": [
    "# Project Milestone 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c845f95a",
   "metadata": {},
   "source": [
    "### Project Subject Area"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "319ab6e3",
   "metadata": {},
   "source": [
    "For my project, I’m looking to understand the patterns behind air pollution and compare selected regions around the world. I’d also like to understand the patterns of which harmful particulates constitute “pollution” and if they’re interrelated."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "468c12c0",
   "metadata": {},
   "source": [
    "### Data Sources"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96455f3f",
   "metadata": {},
   "source": [
    "#### Flat File"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feb4c671",
   "metadata": {},
   "source": [
    "Flat File: CSV from Kaggle\n",
    "\n",
    "Description: This data set covers air pollution data in the USA between the years 2000-2021. This is broken down by counties and dates across counties, with individual harmful gas levels measured.\n",
    "\n",
    "Link: https://www.kaggle.com/datasets/alpacanonymous/us-pollution-20002021"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6e8322b",
   "metadata": {},
   "source": [
    "#### Website"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51927aa8",
   "metadata": {},
   "source": [
    "Website: Table from Wikipedia\n",
    "\n",
    "Description: This table is a ranked list of all countries with the highest levels of pollution over the last 5 years. Measurements are simplified into particulate matter sizes that are considered harmful according to the definition of an air pollutant.\n",
    "\n",
    "Link: https://en.wikipedia.org/wiki/List_of_countries_by_air_pollution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a312669",
   "metadata": {},
   "source": [
    "#### API"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "711aa42f",
   "metadata": {},
   "source": [
    "API: OpenWeatherMap Historical Air Pollution Data\n",
    "\n",
    "Description: This API provides current, forecasted, and historical air pollution data for any geolocation across the world. Air Quality Index and data for polluting gases are available over the last 4 years to pull from. The returned format will be JSON for parsing.\n",
    "\n",
    "Link: https://openweathermap.org/api/air-pollution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a8da0d0",
   "metadata": {},
   "source": [
    "### Relationships Between Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f22b7598",
   "metadata": {},
   "source": [
    "The CSV file contains daily data from major counties in the USA between the years 2000-2021, organized by pollutant type and levels. The website table compares the overall pollution levels of major countries over the last 5 years, simplified through particulate matter sizes. The API allows for geolocation to specifically identify trends over the last 4 years in any location around the globe. This is also broken down by pollutant types and levels, with the addition of an Air Quality Index. All three of these data sources are related by a selectable country and pollutant units. The CSV file and website data table can show overall pollution trends in the context of major countries. The CSV file and API allows for direct comparisons of levels across the globe down to individual historic pollution particulate levels. The website data and API are matched in terms of historic timeline and share similar units, such as particulate size levels."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41307075",
   "metadata": {},
   "source": [
    "### Tackling the Project"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06ab5fa4",
   "metadata": {},
   "source": [
    "Identifying the correct data to use is the first step. I have accomplished that by selecting data sources that can be used in the contexts of one another. The next step is to clean and format the data, using only subsets that I would like to compare and analyze. The CSV file will need to be imported into Python and divided into specific locations and units that would be comparable to other selected data sources. The website table will need to be read as an HTML format and imported into Python as a data frame and filtered through. The API data will take time to parse into a readable format that can be collected and appended into to a data frame. Once several data frames have been created, I will use a combination of line graphs, scatter plots, and histograms to compare selected columns across all data frames. Additional statistical tests such as correlation and covariance may be used. There are a few ethical implications of the data depending on the trends I find. I may run into comparisons where places in the USA have had their pollution levels improve over the last few years, whereas other countries overseas that manufacture or lack infrastructure are getting worse. Understanding the particle matter size units will also aide since specific air pollutant particulates directly impact human health. I’ll certainly run into trying to answer the question that relates to solving worsening air pollution and negative human health impact. One of the biggest challenges I will face is converting the data into a useable format. I’m confident when it comes to CSV files, however working with HTML formats and importing tables from websites is something I’ve never done before. Also, I don’t have much experience with API’s. Parsing through received data after making a call is doable, however; I have yet to successfully store multiple calls and append the data to a data frame. These will require a deeper learning and understanding of necessary Python code."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2108503",
   "metadata": {},
   "source": [
    "### How to Accomplish all 5 Milestones"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f04d25e0",
   "metadata": {},
   "source": [
    "For the first milestone, I’ve had to identify a research question than can be explored through three entirely different forms of data. Going through the raw data files and planning what subsets can be created and filtered, will allow for planned subsequent milestones. For the second milestone, I will import the CSV file into Python and start wrangling the data. I’d like to use my resident state and county to chart pollution trends and identify key pollutants. I will remove other locations and filter historical data to within the last several years to keep timelines across all data sources the same. For the third milestone, I will need to learn and understand how I can import HTML data into a useable Python data frame. There are a few libraries I have already identified that aide with parsing HTML data and formatting it into a useable data frame. There are quite a few empty values in the data, and these cannot be replaced with column averages since the rows are not interrelated. This will limit my use with which countries I can compare against. I’m interested in keeping the particulate matter units to compare against the API results. For the fourth milestone, I will have to use a personal API key to make calls to the URL that will return historical pollution data. This data will need to be parsed according to the supplementary documents for the API, where I will pull air pollutant types, as well as the particulate matter size levels. This will allow me to compare the API results against both the CSV file and the website table. The returned API data will be appended to a list and converted into a data frame. For the fifth milestone, I will use a combination of visual graphs and statistical tests to compare the increasing or decreasing rates of pollution in my hometown, within the context of other countries, and to understand which pollutant gases are of the highest level or the most relevant that we need to find a solution for."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b35d52",
   "metadata": {},
   "source": [
    "# Project Milestone 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b6622a69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Address</th>\n",
       "      <th>State</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>O3 Mean</th>\n",
       "      <th>O3 1st Max Value</th>\n",
       "      <th>...</th>\n",
       "      <th>CO 1st Max Hour</th>\n",
       "      <th>CO AQI</th>\n",
       "      <th>SO2 Mean</th>\n",
       "      <th>SO2 1st Max Value</th>\n",
       "      <th>SO2 1st Max Hour</th>\n",
       "      <th>SO2 AQI</th>\n",
       "      <th>NO2 Mean</th>\n",
       "      <th>NO2 1st Max Value</th>\n",
       "      <th>NO2 1st Max Hour</th>\n",
       "      <th>NO2 AQI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1645 E ROOSEVELT ST-CENTRAL PHOENIX STN</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Maricopa</td>\n",
       "      <td>Phoenix</td>\n",
       "      <td>0.019765</td>\n",
       "      <td>0.040</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>25.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>21</td>\n",
       "      <td>13.0</td>\n",
       "      <td>19.041667</td>\n",
       "      <td>49.0</td>\n",
       "      <td>19</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000-01-02</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1645 E ROOSEVELT ST-CENTRAL PHOENIX STN</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Maricopa</td>\n",
       "      <td>Phoenix</td>\n",
       "      <td>0.015882</td>\n",
       "      <td>0.032</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.958333</td>\n",
       "      <td>3.0</td>\n",
       "      <td>22</td>\n",
       "      <td>4.0</td>\n",
       "      <td>22.958333</td>\n",
       "      <td>36.0</td>\n",
       "      <td>19</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000-01-03</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1645 E ROOSEVELT ST-CENTRAL PHOENIX STN</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Maricopa</td>\n",
       "      <td>Phoenix</td>\n",
       "      <td>0.009353</td>\n",
       "      <td>0.016</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>28.0</td>\n",
       "      <td>5.250000</td>\n",
       "      <td>11.0</td>\n",
       "      <td>19</td>\n",
       "      <td>16.0</td>\n",
       "      <td>38.125000</td>\n",
       "      <td>51.0</td>\n",
       "      <td>8</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000-01-04</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1645 E ROOSEVELT ST-CENTRAL PHOENIX STN</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Maricopa</td>\n",
       "      <td>Phoenix</td>\n",
       "      <td>0.015882</td>\n",
       "      <td>0.033</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>34.0</td>\n",
       "      <td>7.083333</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8</td>\n",
       "      <td>23.0</td>\n",
       "      <td>40.260870</td>\n",
       "      <td>74.0</td>\n",
       "      <td>8</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000-01-05</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1645 E ROOSEVELT ST-CENTRAL PHOENIX STN</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Maricopa</td>\n",
       "      <td>Phoenix</td>\n",
       "      <td>0.007353</td>\n",
       "      <td>0.012</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>42.0</td>\n",
       "      <td>8.708333</td>\n",
       "      <td>15.0</td>\n",
       "      <td>7</td>\n",
       "      <td>21.0</td>\n",
       "      <td>48.450000</td>\n",
       "      <td>61.0</td>\n",
       "      <td>22</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608694</th>\n",
       "      <td>2021-06-26</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>NCore - North Cheyenne Soccer Complex</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Laramie</td>\n",
       "      <td>Not in a city</td>\n",
       "      <td>0.040588</td>\n",
       "      <td>0.049</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.409091</td>\n",
       "      <td>0.7</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.281818</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608695</th>\n",
       "      <td>2021-06-27</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>27</td>\n",
       "      <td>NCore - North Cheyenne Soccer Complex</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Laramie</td>\n",
       "      <td>Not in a city</td>\n",
       "      <td>0.037882</td>\n",
       "      <td>0.042</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.325000</td>\n",
       "      <td>0.4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.104167</td>\n",
       "      <td>2.3</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608696</th>\n",
       "      <td>2021-06-28</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>28</td>\n",
       "      <td>NCore - North Cheyenne Soccer Complex</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Laramie</td>\n",
       "      <td>Not in a city</td>\n",
       "      <td>0.039765</td>\n",
       "      <td>0.050</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.326087</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.678261</td>\n",
       "      <td>5.8</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608697</th>\n",
       "      <td>2021-06-29</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>29</td>\n",
       "      <td>NCore - North Cheyenne Soccer Complex</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Laramie</td>\n",
       "      <td>Not in a city</td>\n",
       "      <td>0.049176</td>\n",
       "      <td>0.058</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.317391</td>\n",
       "      <td>0.5</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.934783</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608698</th>\n",
       "      <td>2021-06-30</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>30</td>\n",
       "      <td>NCore - North Cheyenne Soccer Complex</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Laramie</td>\n",
       "      <td>Not in a city</td>\n",
       "      <td>0.052333</td>\n",
       "      <td>0.054</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.366667</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.762500</td>\n",
       "      <td>7.5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>608699 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Date  Year  Month  Day                                  Address  \\\n",
       "0       2000-01-01  2000      1    1  1645 E ROOSEVELT ST-CENTRAL PHOENIX STN   \n",
       "1       2000-01-02  2000      1    2  1645 E ROOSEVELT ST-CENTRAL PHOENIX STN   \n",
       "2       2000-01-03  2000      1    3  1645 E ROOSEVELT ST-CENTRAL PHOENIX STN   \n",
       "3       2000-01-04  2000      1    4  1645 E ROOSEVELT ST-CENTRAL PHOENIX STN   \n",
       "4       2000-01-05  2000      1    5  1645 E ROOSEVELT ST-CENTRAL PHOENIX STN   \n",
       "...            ...   ...    ...  ...                                      ...   \n",
       "608694  2021-06-26  2021      6   26    NCore - North Cheyenne Soccer Complex   \n",
       "608695  2021-06-27  2021      6   27    NCore - North Cheyenne Soccer Complex   \n",
       "608696  2021-06-28  2021      6   28    NCore - North Cheyenne Soccer Complex   \n",
       "608697  2021-06-29  2021      6   29    NCore - North Cheyenne Soccer Complex   \n",
       "608698  2021-06-30  2021      6   30    NCore - North Cheyenne Soccer Complex   \n",
       "\n",
       "          State    County           City   O3 Mean  O3 1st Max Value  ...  \\\n",
       "0       Arizona  Maricopa        Phoenix  0.019765             0.040  ...   \n",
       "1       Arizona  Maricopa        Phoenix  0.015882             0.032  ...   \n",
       "2       Arizona  Maricopa        Phoenix  0.009353             0.016  ...   \n",
       "3       Arizona  Maricopa        Phoenix  0.015882             0.033  ...   \n",
       "4       Arizona  Maricopa        Phoenix  0.007353             0.012  ...   \n",
       "...         ...       ...            ...       ...               ...  ...   \n",
       "608694  Wyoming   Laramie  Not in a city  0.040588             0.049  ...   \n",
       "608695  Wyoming   Laramie  Not in a city  0.037882             0.042  ...   \n",
       "608696  Wyoming   Laramie  Not in a city  0.039765             0.050  ...   \n",
       "608697  Wyoming   Laramie  Not in a city  0.049176             0.058  ...   \n",
       "608698  Wyoming   Laramie  Not in a city  0.052333             0.054  ...   \n",
       "\n",
       "        CO 1st Max Hour  CO AQI  SO2 Mean  SO2 1st Max Value  \\\n",
       "0                    23    25.0  3.000000                9.0   \n",
       "1                     0    26.0  1.958333                3.0   \n",
       "2                     8    28.0  5.250000               11.0   \n",
       "3                    23    34.0  7.083333               16.0   \n",
       "4                     2    42.0  8.708333               15.0   \n",
       "...                 ...     ...       ...                ...   \n",
       "608694                0     1.0  0.409091                0.7   \n",
       "608695                0     1.0  0.325000                0.4   \n",
       "608696                0     1.0  0.326087                0.5   \n",
       "608697                0     1.0  0.317391                0.5   \n",
       "608698                0     1.0  0.366667                0.5   \n",
       "\n",
       "        SO2 1st Max Hour  SO2 AQI   NO2 Mean  NO2 1st Max Value  \\\n",
       "0                     21     13.0  19.041667               49.0   \n",
       "1                     22      4.0  22.958333               36.0   \n",
       "2                     19     16.0  38.125000               51.0   \n",
       "3                      8     23.0  40.260870               74.0   \n",
       "4                      7     21.0  48.450000               61.0   \n",
       "...                  ...      ...        ...                ...   \n",
       "608694                 2      0.0   1.281818                2.1   \n",
       "608695                 4      0.0   1.104167                2.3   \n",
       "608696                 2      0.0   1.678261                5.8   \n",
       "608697                20      0.0   2.934783                7.4   \n",
       "608698                 3      0.0   2.762500                7.5   \n",
       "\n",
       "        NO2 1st Max Hour  NO2 AQI  \n",
       "0                     19       46  \n",
       "1                     19       34  \n",
       "2                      8       48  \n",
       "3                      8       72  \n",
       "4                     22       58  \n",
       "...                  ...      ...  \n",
       "608694                 0        2  \n",
       "608695                20        2  \n",
       "608696                23        5  \n",
       "608697                 0        7  \n",
       "608698                 5        7  \n",
       "\n",
       "[608699 rows x 24 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing flat file and convert to dataframe\n",
    "\n",
    "df_flat = pd.read_csv('pollution_2000_2021.csv')\n",
    "df_flat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f04ed68c",
   "metadata": {},
   "source": [
    "### Step 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "330c5b93",
   "metadata": {},
   "source": [
    "This step is to choose a single city that I would like to use for analysis and comparisons. I've decided to use the data from my home city of Seattle, WA. The dataframe is filtered through all rows with the value \"Seattle\" under the \"City\" column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6584218b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Address</th>\n",
       "      <th>State</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>O3 Mean</th>\n",
       "      <th>O3 1st Max Value</th>\n",
       "      <th>...</th>\n",
       "      <th>CO 1st Max Hour</th>\n",
       "      <th>CO AQI</th>\n",
       "      <th>SO2 Mean</th>\n",
       "      <th>SO2 1st Max Value</th>\n",
       "      <th>SO2 1st Max Hour</th>\n",
       "      <th>SO2 AQI</th>\n",
       "      <th>NO2 Mean</th>\n",
       "      <th>NO2 1st Max Value</th>\n",
       "      <th>NO2 1st Max Hour</th>\n",
       "      <th>NO2 AQI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22888</th>\n",
       "      <td>2000-05-03</td>\n",
       "      <td>2000</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4103 BEACON HILL S</td>\n",
       "      <td>Washington</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>0.032941</td>\n",
       "      <td>0.040</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.125000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "      <td>11.0</td>\n",
       "      <td>18.478261</td>\n",
       "      <td>42.0</td>\n",
       "      <td>6</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22889</th>\n",
       "      <td>2000-05-04</td>\n",
       "      <td>2000</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4103 BEACON HILL S</td>\n",
       "      <td>Washington</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>0.031118</td>\n",
       "      <td>0.040</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>4.0</td>\n",
       "      <td>20.173913</td>\n",
       "      <td>35.0</td>\n",
       "      <td>6</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22890</th>\n",
       "      <td>2000-05-05</td>\n",
       "      <td>2000</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4103 BEACON HILL S</td>\n",
       "      <td>Washington</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>0.031059</td>\n",
       "      <td>0.040</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.173913</td>\n",
       "      <td>27.0</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22891</th>\n",
       "      <td>2000-05-06</td>\n",
       "      <td>2000</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>4103 BEACON HILL S</td>\n",
       "      <td>Washington</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>0.033588</td>\n",
       "      <td>0.042</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>13.826087</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22892</th>\n",
       "      <td>2000-05-07</td>\n",
       "      <td>2000</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>4103 BEACON HILL S</td>\n",
       "      <td>Washington</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>0.027353</td>\n",
       "      <td>0.036</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.916667</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.956522</td>\n",
       "      <td>27.0</td>\n",
       "      <td>17</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date  Year  Month  Day             Address       State County  \\\n",
       "22888  2000-05-03  2000      5    3  4103 BEACON HILL S  Washington   King   \n",
       "22889  2000-05-04  2000      5    4  4103 BEACON HILL S  Washington   King   \n",
       "22890  2000-05-05  2000      5    5  4103 BEACON HILL S  Washington   King   \n",
       "22891  2000-05-06  2000      5    6  4103 BEACON HILL S  Washington   King   \n",
       "22892  2000-05-07  2000      5    7  4103 BEACON HILL S  Washington   King   \n",
       "\n",
       "          City   O3 Mean  O3 1st Max Value  ...  CO 1st Max Hour  CO AQI  \\\n",
       "22888  Seattle  0.032941             0.040  ...                0     3.0   \n",
       "22889  Seattle  0.031118             0.040  ...                7     5.0   \n",
       "22890  Seattle  0.031059             0.040  ...                0     3.0   \n",
       "22891  Seattle  0.033588             0.042  ...                0     3.0   \n",
       "22892  Seattle  0.027353             0.036  ...                0     3.0   \n",
       "\n",
       "       SO2 Mean  SO2 1st Max Value  SO2 1st Max Hour  SO2 AQI   NO2 Mean  \\\n",
       "22888  1.125000                8.0                 1     11.0  18.478261   \n",
       "22889  0.750000                3.0                17      4.0  20.173913   \n",
       "22890  1.000000                4.0                10      6.0  14.173913   \n",
       "22891  0.666667                2.0                 0      3.0  13.826087   \n",
       "22892  1.916667                4.0                15      6.0  15.956522   \n",
       "\n",
       "       NO2 1st Max Value  NO2 1st Max Hour  NO2 AQI  \n",
       "22888               42.0                 6       40  \n",
       "22889               35.0                 6       33  \n",
       "22890               27.0                 5       25  \n",
       "22891               29.0                 0       27  \n",
       "22892               27.0                17       25  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filtering and selecting for my home city\n",
    "\n",
    "df_flat = df_flat[df_flat['City'] == 'Seattle']\n",
    "df_flat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66336d22",
   "metadata": {},
   "source": [
    "### Step 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfb8ea13",
   "metadata": {},
   "source": [
    "This step is to figure out a range of years with enough consistent data to keep in the dataframe. I first looked at the value counts for each numerical year under the \"Year\" column. After that I selected specific data using a query function to includes years 2018 to 2021 only. I can see that years 2005, 2013, and 2014 I can consider to be outliers since only a handful of days had their data reported during those years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5e1591b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2019    335\n",
       "2018    333\n",
       "2020    293\n",
       "2016    285\n",
       "2017    194\n",
       "2021    172\n",
       "2015    166\n",
       "2001    151\n",
       "2004    141\n",
       "2002    140\n",
       "2003    136\n",
       "2000    113\n",
       "2005     86\n",
       "2013     37\n",
       "2014     21\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# before selecting year range\n",
    "\n",
    "df_flat['Year'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c6b61e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2019    335\n",
       "2018    333\n",
       "2020    293\n",
       "2021    172\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after selecting for years 2018-2021\n",
    "\n",
    "df_flat = df_flat.query('2018 <= Year <= 2021')\n",
    "df_flat['Year'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e365218",
   "metadata": {},
   "source": [
    "### Step 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c199f3bd",
   "metadata": {},
   "source": [
    "This step is to select only for the columns I would like to analyze. The full date column was omitted, as well as the high and low values of pollutents for each day. Keeping only the averages allows for a consistent summary and comparison against other data sources. I also omitted all location columns since I know the data only represents the city of Seattle, WA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1453dc42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3 Mean</th>\n",
       "      <th>CO Mean</th>\n",
       "      <th>SO2 Mean</th>\n",
       "      <th>NO2 Mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>525569</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011765</td>\n",
       "      <td>0.273684</td>\n",
       "      <td>0.095455</td>\n",
       "      <td>11.662500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525570</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.308333</td>\n",
       "      <td>0.447826</td>\n",
       "      <td>19.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525571</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.320833</td>\n",
       "      <td>0.563636</td>\n",
       "      <td>21.195833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525572</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>2.229167</td>\n",
       "      <td>23.775000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525573</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.005118</td>\n",
       "      <td>0.325000</td>\n",
       "      <td>0.640909</td>\n",
       "      <td>16.304167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year  Month  Day   O3 Mean   CO Mean  SO2 Mean   NO2 Mean\n",
       "525569  2018      1    1  0.011765  0.273684  0.095455  11.662500\n",
       "525570  2018      1    2  0.002000  0.308333  0.447826  19.916667\n",
       "525571  2018      1    3  0.002000  0.320833  0.563636  21.195833\n",
       "525572  2018      1    4  0.000000  0.600000  2.229167  23.775000\n",
       "525573  2018      1    8  0.005118  0.325000  0.640909  16.304167"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# selecting only the column names I need\n",
    "\n",
    "df_flat = df_flat[['Year', 'Month', 'Day', 'O3 Mean', 'CO Mean', 'SO2 Mean', 'NO2 Mean']]\n",
    "df_flat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "995cc4ca",
   "metadata": {},
   "source": [
    "### Step 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73fb584a",
   "metadata": {},
   "source": [
    "This step is to replace the header names of each column to simplify visualizaing and writing commands for parsing through the data. I removed the word \"Mean\" from the header names since most sources only look at daily average pollutant levels and allows for a default label when comparing across other data sources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e6df25a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3</th>\n",
       "      <th>CO</th>\n",
       "      <th>SO2</th>\n",
       "      <th>NO2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>525569</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011765</td>\n",
       "      <td>0.273684</td>\n",
       "      <td>0.095455</td>\n",
       "      <td>11.662500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525570</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.308333</td>\n",
       "      <td>0.447826</td>\n",
       "      <td>19.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525571</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.320833</td>\n",
       "      <td>0.563636</td>\n",
       "      <td>21.195833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525572</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>2.229167</td>\n",
       "      <td>23.775000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525573</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.005118</td>\n",
       "      <td>0.325000</td>\n",
       "      <td>0.640909</td>\n",
       "      <td>16.304167</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year  Month  Day        O3        CO       SO2        NO2\n",
       "525569  2018      1    1  0.011765  0.273684  0.095455  11.662500\n",
       "525570  2018      1    2  0.002000  0.308333  0.447826  19.916667\n",
       "525571  2018      1    3  0.002000  0.320833  0.563636  21.195833\n",
       "525572  2018      1    4  0.000000  0.600000  2.229167  23.775000\n",
       "525573  2018      1    8  0.005118  0.325000  0.640909  16.304167"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace existing header names with new names\n",
    "\n",
    "df_flat = df_flat.rename({'O3 Mean':'O3', 'CO Mean':'CO', 'SO2 Mean':'SO2', 'NO2 Mean':'NO2'}, axis=1)\n",
    "df_flat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c4ee1c3",
   "metadata": {},
   "source": [
    "### Step 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a9bf27b",
   "metadata": {},
   "source": [
    "This step is for checking and formatting the data as necessary. I searched through the data for any missing data or NaN values. After I found none, I pulled a summary of data types for each column in the data frame to ensure that all data points are of the numeric type. Now that I know there aren't any missing data points and the data is in teh correct format, I rounded off the decimal places to the hundreths place for a more readable format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9bafe3cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# looks good, no non-number nor null values\n",
    "\n",
    "df_flat.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f1e9f7bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year       int64\n",
       "Month      int64\n",
       "Day        int64\n",
       "O3       float64\n",
       "CO       float64\n",
       "SO2      float64\n",
       "NO2      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# looks good, no string values nor incorrect data types\n",
    "\n",
    "df_flat.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6b802e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3</th>\n",
       "      <th>CO</th>\n",
       "      <th>SO2</th>\n",
       "      <th>NO2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>525569</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.10</td>\n",
       "      <td>11.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525570</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.45</td>\n",
       "      <td>19.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525571</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.56</td>\n",
       "      <td>21.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525572</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>2.23</td>\n",
       "      <td>23.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525573</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.64</td>\n",
       "      <td>16.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year  Month  Day    O3    CO   SO2    NO2\n",
       "525569  2018      1    1  0.01  0.27  0.10  11.66\n",
       "525570  2018      1    2  0.00  0.31  0.45  19.92\n",
       "525571  2018      1    3  0.00  0.32  0.56  21.20\n",
       "525572  2018      1    4  0.00  0.60  2.23  23.78\n",
       "525573  2018      1    8  0.01  0.32  0.64  16.30"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rounding all decimals to the hundreths place\n",
    "\n",
    "df_flat = df_flat.round(2)\n",
    "df_flat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aadf2f9",
   "metadata": {},
   "source": [
    "### Final Flat File Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "909efbb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3</th>\n",
       "      <th>CO</th>\n",
       "      <th>SO2</th>\n",
       "      <th>NO2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>525569</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.10</td>\n",
       "      <td>11.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525570</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.45</td>\n",
       "      <td>19.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525571</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.56</td>\n",
       "      <td>21.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525572</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>2.23</td>\n",
       "      <td>23.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525573</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.64</td>\n",
       "      <td>16.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608531</th>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.70</td>\n",
       "      <td>14.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608532</th>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>27</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.70</td>\n",
       "      <td>14.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608533</th>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>28</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.75</td>\n",
       "      <td>19.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608534</th>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>29</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.52</td>\n",
       "      <td>3.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>608535</th>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>30</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.32</td>\n",
       "      <td>2.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1133 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year  Month  Day    O3    CO   SO2    NO2\n",
       "525569  2018      1    1  0.01  0.27  0.10  11.66\n",
       "525570  2018      1    2  0.00  0.31  0.45  19.92\n",
       "525571  2018      1    3  0.00  0.32  0.56  21.20\n",
       "525572  2018      1    4  0.00  0.60  2.23  23.78\n",
       "525573  2018      1    8  0.01  0.32  0.64  16.30\n",
       "...      ...    ...  ...   ...   ...   ...    ...\n",
       "608531  2021      6   26  0.05  0.24  0.70  14.26\n",
       "608532  2021      6   27  0.05  0.20  0.70  14.88\n",
       "608533  2021      6   28  0.05  0.21  0.75  19.05\n",
       "608534  2021      6   29  0.02  0.12  0.52   3.02\n",
       "608535  2021      6   30  0.02  0.10  0.32   2.70\n",
       "\n",
       "[1133 rows x 7 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_flat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96b06f4a",
   "metadata": {},
   "source": [
    "### Ethical Implications"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a12c2ca",
   "metadata": {},
   "source": [
    "One of the ethical implications is intentionally leaving out data that can be of significant value. Through the data wrangling specific to the flat file, I have introduced quite a bit of personal bias. I have selected my home town out of personal curiosity, but I aso realize that the state of Washington is generally a cleaner state, and is both the greenest and most natural state in the United States. Analyzing this selection of data may lead me to draw false conclusions or improper trends. That being said, there are several steps above that were a part of the thought process that I used to approach the data and parse through it. I filtered the day by selecting my own city of interest. From there I needed to figure out which timeframe, in years, would work best to analyze. Rather than selecting randomly a year range, I took a summary of value counts for each year and determined with of the last several years had the most data points. After that, the next several steps were all about cleaning the data. From determining NaN values and correct data types, to simplifying decimal values for visual coherence. The dataframe went from 15,000,000 points of data over 609,000 rows, to a much more manageable and relevent 8,000 points of data over 1,200 rows."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7876da5e",
   "metadata": {},
   "source": [
    "# Project Milestone 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "371d8fde",
   "metadata": {},
   "source": [
    "### Step 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f75477b7",
   "metadata": {},
   "source": [
    "This step is to import the data table into a useable format from html to python. This step was kept simple, using the response library to convert the incoming text to a pandas dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2a2d4268",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Chad</td>\n",
       "      <td>89.7</td>\n",
       "      <td>76.0</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>17179740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>80.1</td>\n",
       "      <td>49.7</td>\n",
       "      <td>--</td>\n",
       "      <td>39.6</td>\n",
       "      <td>--</td>\n",
       "      <td>43533592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "      <td>231402117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "      <td>1463265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "      <td>169356251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>127</td>\n",
       "      <td>Bonaire, Saint Eustatius and Saba</td>\n",
       "      <td>3.3</td>\n",
       "      <td>5.1</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>26221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>128</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>3.0</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>63867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>129</td>\n",
       "      <td>U.S. Virgin Islands</td>\n",
       "      <td>2.9</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>--</td>\n",
       "      <td>105870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>130</td>\n",
       "      <td>French Polynesia</td>\n",
       "      <td>2.5</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>304032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>131</td>\n",
       "      <td>Guam</td>\n",
       "      <td>1.3</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>170534</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>131 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Rank                     Country/Region  2022  2021  2020  2019  2018  \\\n",
       "0       1                               Chad  89.7  76.0    --    --    --   \n",
       "1       2                               Iraq  80.1  49.7    --  39.6    --   \n",
       "2       3                           Pakistan  70.9  66.8    59  65.8  74.3   \n",
       "3       4                            Bahrain  66.6  49.8  39.7  46.8  59.8   \n",
       "4       5                         Bangladesh  65.8  76.9  77.1  83.3  97.1   \n",
       "..    ...                                ...   ...   ...   ...   ...   ...   \n",
       "126   127  Bonaire, Saint Eustatius and Saba   3.3   5.1    --    --    --   \n",
       "127   128                            Bermuda   3.0    --    --    --    --   \n",
       "128   129                U.S. Virgin Islands   2.9   4.5   3.7   3.5    --   \n",
       "129   130                   French Polynesia   2.5    --    --    --    --   \n",
       "130   131                               Guam   1.3    --    --    --    --   \n",
       "\n",
       "     Population  \n",
       "0      17179740  \n",
       "1      43533592  \n",
       "2     231402117  \n",
       "3       1463265  \n",
       "4     169356251  \n",
       "..          ...  \n",
       "126       26221  \n",
       "127       63867  \n",
       "128      105870  \n",
       "129      304032  \n",
       "130      170534  \n",
       "\n",
       "[131 rows x 8 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# requesting HTML response using URL\n",
    "wikiurl = \"https://en.wikipedia.org/wiki/List_of_countries_by_air_pollution\"\n",
    "table_class = \"wikitable sortable jquery-tablesorter\"\n",
    "response = requests.get(wikiurl)\n",
    "\n",
    "# parsing data from HTML\n",
    "soup = BeautifulSoup(response.text, 'html.parser')\n",
    "table_find = soup.find('table',{'class':\"wikitable\"})\n",
    "\n",
    "# converting data into a dataframe\n",
    "table_read = pd.read_html(str(table_find))\n",
    "df_html = pd.DataFrame(table_read[0])\n",
    "df_html"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6db7282e",
   "metadata": {},
   "source": [
    "### Step 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6ec1460",
   "metadata": {},
   "source": [
    "This step is to select only for the columns I would like to analyze. The rank and population columns were omitted since my data analysis will not include any ranked comparisons nor take populations into account."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9f5302e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chad</td>\n",
       "      <td>89.7</td>\n",
       "      <td>76.0</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Iraq</td>\n",
       "      <td>80.1</td>\n",
       "      <td>49.7</td>\n",
       "      <td>--</td>\n",
       "      <td>39.6</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region  2022  2021  2020  2019  2018\n",
       "0           Chad  89.7  76.0    --    --    --\n",
       "1           Iraq  80.1  49.7    --  39.6    --\n",
       "2       Pakistan  70.9  66.8    59  65.8  74.3\n",
       "3        Bahrain  66.6  49.8  39.7  46.8  59.8\n",
       "4     Bangladesh  65.8  76.9  77.1  83.3  97.1"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# selecting only the column names I need\n",
    "\n",
    "df_html = df_html[['Country/Region', '2022', '2021', '2020', '2019', '2018']]\n",
    "df_html.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6460d71d",
   "metadata": {},
   "source": [
    "### Step 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3127de8e",
   "metadata": {},
   "source": [
    "This step is to replace any header names to simplify writing commands for parsing through the data. I replaced the column name \"Country/Region\" with \"Region\" since the definition accounts for both nouns listed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "951284ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chad</td>\n",
       "      <td>89.7</td>\n",
       "      <td>76.0</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Iraq</td>\n",
       "      <td>80.1</td>\n",
       "      <td>49.7</td>\n",
       "      <td>--</td>\n",
       "      <td>39.6</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Region  2022  2021  2020  2019  2018\n",
       "0        Chad  89.7  76.0    --    --    --\n",
       "1        Iraq  80.1  49.7    --  39.6    --\n",
       "2    Pakistan  70.9  66.8    59  65.8  74.3\n",
       "3     Bahrain  66.6  49.8  39.7  46.8  59.8\n",
       "4  Bangladesh  65.8  76.9  77.1  83.3  97.1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replacing existing header name with new name\n",
    "\n",
    "df_html = df_html.rename({'Country/Region':'Region'}, axis=1)\n",
    "df_html.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e52fcc31",
   "metadata": {},
   "source": [
    "### Step 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc147c08",
   "metadata": {},
   "source": [
    "This step is for checking and formatting the data as necessary. Columns with missing data were imported with \"--\" and converted to string values. I omitted all \"--\" and replaced them with an empty value before converting all necessary columns to numeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "12bb8dbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Region     object\n",
       "2022      float64\n",
       "2021       object\n",
       "2020       object\n",
       "2019       object\n",
       "2018       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# before converting all necessary columns to numeric\n",
    "\n",
    "df_html.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1ce973ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replacing all \"--\" string values with an empty string value and converting necessary columns to numeric\n",
    "\n",
    "df_html = df_html.replace('--', '')\n",
    "df_html['2022'] = pd.to_numeric(df_html['2022'])\n",
    "df_html['2021'] = pd.to_numeric(df_html['2021'])\n",
    "df_html['2020'] = pd.to_numeric(df_html['2020'])\n",
    "df_html['2019'] = pd.to_numeric(df_html['2019'])\n",
    "df_html['2018'] = pd.to_numeric(df_html['2018'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9bb73ab8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Region     object\n",
       "2022      float64\n",
       "2021      float64\n",
       "2020      float64\n",
       "2019      float64\n",
       "2018      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after converting all necessary columns to numeric\n",
    "\n",
    "df_html.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccd12c1b",
   "metadata": {},
   "source": [
    "### Step 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2239f61",
   "metadata": {},
   "source": [
    "This step is to check for any missing values in the dataframe after converting the necessary columns to numeric. There were quite a few NaN values so I omitted all rows with any number of missing data under any year column. This allows for keeping regions that have only full data present over all years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b3871409",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# confirming NaN values are present\n",
    "\n",
    "df_html.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5f94b870",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Kuwait</td>\n",
       "      <td>55.8</td>\n",
       "      <td>29.7</td>\n",
       "      <td>34.0</td>\n",
       "      <td>38.3</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>India</td>\n",
       "      <td>53.3</td>\n",
       "      <td>58.1</td>\n",
       "      <td>51.9</td>\n",
       "      <td>58.1</td>\n",
       "      <td>72.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Region  2022  2021  2020  2019  2018\n",
       "2    Pakistan  70.9  66.8  59.0  65.8  74.3\n",
       "3     Bahrain  66.6  49.8  39.7  46.8  59.8\n",
       "4  Bangladesh  65.8  76.9  77.1  83.3  97.1\n",
       "6      Kuwait  55.8  29.7  34.0  38.3  56.0\n",
       "7       India  53.3  58.1  51.9  58.1  72.5"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# removing entire rows with any NaN values under any year, while excluding \"Region\" column when running the check\n",
    "\n",
    "df_html = df_html.dropna(subset=df_html.columns.difference(['Region']), how='any')\n",
    "df_html.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc9148f1",
   "metadata": {},
   "source": [
    "### Final HTML Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3188711f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Kuwait</td>\n",
       "      <td>55.8</td>\n",
       "      <td>29.7</td>\n",
       "      <td>34.0</td>\n",
       "      <td>38.3</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>India</td>\n",
       "      <td>53.3</td>\n",
       "      <td>58.1</td>\n",
       "      <td>51.9</td>\n",
       "      <td>58.1</td>\n",
       "      <td>72.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>Estonia</td>\n",
       "      <td>4.9</td>\n",
       "      <td>5.9</td>\n",
       "      <td>5.9</td>\n",
       "      <td>6.2</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>4.8</td>\n",
       "      <td>6.8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>Puerto Rico</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4.8</td>\n",
       "      <td>3.7</td>\n",
       "      <td>10.2</td>\n",
       "      <td>13.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>Australia</td>\n",
       "      <td>4.2</td>\n",
       "      <td>5.7</td>\n",
       "      <td>7.6</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>3.4</td>\n",
       "      <td>6.1</td>\n",
       "      <td>7.2</td>\n",
       "      <td>5.5</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Region  2022  2021  2020  2019  2018\n",
       "2       Pakistan  70.9  66.8  59.0  65.8  74.3\n",
       "3        Bahrain  66.6  49.8  39.7  46.8  59.8\n",
       "4     Bangladesh  65.8  76.9  77.1  83.3  97.1\n",
       "6         Kuwait  55.8  29.7  34.0  38.3  56.0\n",
       "7          India  53.3  58.1  51.9  58.1  72.5\n",
       "..           ...   ...   ...   ...   ...   ...\n",
       "119      Estonia   4.9   5.9   5.9   6.2   7.2\n",
       "120  New Zealand   4.8   6.8   7.0   7.5   7.7\n",
       "121  Puerto Rico   4.3   4.8   3.7  10.2  13.7\n",
       "122    Australia   4.2   5.7   7.6   8.0   6.8\n",
       "125      Iceland   3.4   6.1   7.2   5.5   5.0\n",
       "\n",
       "[70 rows x 6 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_html"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cd19a31",
   "metadata": {},
   "source": [
    "### Ethical Implications"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b46c9b5",
   "metadata": {},
   "source": [
    "There are a couple of ethical implications here when data wrangling the html source. I have left out entire regions for the sake of having complete data. This misrepresents any large, worldy trends of pollution that can be observed when analyzing infuential regions, rather than only a select few to keep with completion. Although, enough usable data remains to where I hope to justifiably conclude polluation patterns as accurately as possible. There are several steps above that were a part of a cleaning and parsing the data that went into deciding my data selections. I first used a simple response library to get the data from my html url. This was converted to text, selected for the correct data table, and then converted to a useable pandas dataframe. After that, I kept only the necessary columns I needed for analysis, and changed the name of one of the columns to keep away form redundant definitions. After that, I noticed much of the data imported was converted to string format due to the url's own way of representing missing values with string characters. I deleted these characters and converted all necessary columns to numeric. The result was numeric data with NaN values. I finally removed entire rows that had any NaN values under any year column, to only keep complete data. The dataframe went from about 1,000 points of data to about 400 points of data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0817397",
   "metadata": {},
   "source": [
    "# Project Milestone 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6ea8c12",
   "metadata": {},
   "source": [
    "### Yearly Date Ranges Used to Pull Data From OpenWeatherMap API"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fca0759c",
   "metadata": {},
   "source": [
    "Start = 1606550400 (November 28, 2020)\n",
    "End = 1609401600 (December 31, 2020)\n",
    "\n",
    "Start = 1609488000 (January 1, 2021)\n",
    "End = 1640937600 (December 31, 2021)\n",
    "\n",
    "Start = 1641024000 (January 1, 2022)\n",
    "End = 1672473600 (December 31, 2022)\n",
    "\n",
    "Start = 1672560000 (January 1, 2023)\n",
    "End = 1704009600 (December 31, 2023)\n",
    "\n",
    "Start = 1704096000 (January 1, 2024)\n",
    "End = 1707724800 (February 12, 2024)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0231e27",
   "metadata": {},
   "source": [
    "### Step 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05a97c43",
   "metadata": {},
   "source": [
    "This step is to lookup historical pollution data for the city of Seattle, WA. I defined a function using the city's latitude and longitude coordinates, so that I could pass yearly timesframes into the function and receive JSON data. In the function, I filtered for only the pollution variable of pm2.5 at hourly reads. I took the average of all hours in the year and then appended all years to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "abe02f1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining API lookup function for Seattle, WA\n",
    "\n",
    "def seattle_lookup(start, end):\n",
    "    year = []\n",
    "    year_average = []\n",
    "    url = 'https://api.openweathermap.org/data/2.5/air_pollution/history'\n",
    "    payload = {'lat': 47.608013, 'lon': -122.335167, 'start': start, 'end': end,\n",
    "           'appid': 'ad04c63a71b630dc986df404da34f584'}\n",
    "    try:\n",
    "        response = requests.get(url, params=payload)\n",
    "    except:\n",
    "        exit()\n",
    "    seattle_data = response.json()\n",
    "    for item in seattle_data['list']:\n",
    "        year.append(item['components']['pm2_5'])\n",
    "    year_average = (sum(year)/len(year))\n",
    "    return year_average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "43014d40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calling function to return pollution pm2.5 variable within yearly time frame, and appending to list\n",
    "\n",
    "seattle_2020 = seattle_lookup(1606550400, 1609401600)\n",
    "seattle_2021 = seattle_lookup(1609488000, 1640937600)\n",
    "seattle_2022 = seattle_lookup(1641024000, 1672473600)\n",
    "seattle_2023 = seattle_lookup(1672560000, 1704009600)\n",
    "seattle_2024 = seattle_lookup(1704096000, 1707724800)\n",
    "seattle_pm2_5 = [seattle_2020, seattle_2021, seattle_2022, seattle_2023, seattle_2024]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e2dd8ed0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5.920151324085748,\n",
       " 6.430009207043393,\n",
       " 7.476295950519317,\n",
       " 7.499210617426423,\n",
       " 6.584030456852792]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seattle_pm2_5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdef762",
   "metadata": {},
   "source": [
    "### Step 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82abcd05",
   "metadata": {},
   "source": [
    "This step is to lookup historical pollution data for the city of Chicago, IL. I defined a function using the city's latitude and longitude coordinates, so that I could pass yearly timesframes into the function and receive JSON data. In the function, I filtered for only the pollution variable of pm2.5 at hourly reads. I took the average of all hours in the year and then appended all years to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1abb95a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining API lookup function for Chicago, IL\n",
    "\n",
    "def chicago_lookup(start, end):\n",
    "    year = []\n",
    "    year_average = []\n",
    "    url = 'https://api.openweathermap.org/data/2.5/air_pollution/history'\n",
    "    payload = {'lat': 41.881832, 'lon': -87.623177, 'start': start, 'end': end,\n",
    "               'appid': 'ad04c63a71b630dc986df404da34f584'}\n",
    "    try:\n",
    "        response = requests.get(url, params=payload)\n",
    "    except:\n",
    "        exit()\n",
    "    chicago_data = response.json()\n",
    "    for item in chicago_data['list']:\n",
    "        year.append(item['components']['pm2_5'])\n",
    "    year_average = (sum(year)/len(year))\n",
    "    return year_average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bcdd957d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calling function to return pollution pm2.5 variable within yearly time frame, and appending to list\n",
    "\n",
    "chicago_2020 = chicago_lookup(1606550400, 1609401600)\n",
    "chicago_2021 = chicago_lookup(1609488000, 1640937600)\n",
    "chicago_2022 = chicago_lookup(1641024000, 1672473600)\n",
    "chicago_2023 = chicago_lookup(1672560000, 1704009600)\n",
    "chicago_2024 = chicago_lookup(1704096000, 1707724800)\n",
    "chicago_pm2_5 = [chicago_2020, chicago_2021, chicago_2022, chicago_2023, chicago_2024]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cd02dba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[12.27467843631777,\n",
       " 10.832321817973176,\n",
       " 9.98686777920409,\n",
       " 10.765145989613348,\n",
       " 14.876345177664954]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chicago_pm2_5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d53453ae",
   "metadata": {},
   "source": [
    "### Step 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c76fe223",
   "metadata": {},
   "source": [
    "This step is to lookup historical pollution data for the city of New York City, NY. I defined a function using the city's latitude and longitude coordinates, so that I could pass yearly timesframes into the function and receive JSON data. In the function, I filtered for only the pollution variable of pm2.5 at hourly reads. I took the average of all hours in the year and then appended all years to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6d19b5d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining API lookup function for New York City, NY\n",
    "\n",
    "def nyc_lookup(start, end):\n",
    "    year = []\n",
    "    year_average = []\n",
    "    url = 'https://api.openweathermap.org/data/2.5/air_pollution/history'\n",
    "    payload = {'lat': 40.730610, 'lon': -73.935242, 'start': start, 'end': end,\n",
    "               'appid': 'ad04c63a71b630dc986df404da34f584'}\n",
    "    try:\n",
    "        response = requests.get(url, params=payload)\n",
    "    except:\n",
    "        exit()\n",
    "    nyc_data = response.json()\n",
    "    for item in nyc_data['list']:\n",
    "        year.append(item['components']['pm2_5'])\n",
    "    year_average = (sum(year)/len(year))\n",
    "    return year_average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c4fa5b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calling function to return pollution pm2.5 variable within yearly time frame, and appending to list\n",
    "\n",
    "nyc_2020 = nyc_lookup(1606550400, 1609401600)\n",
    "nyc_2021 = nyc_lookup(1609488000, 1640937600)\n",
    "nyc_2022 = nyc_lookup(1641024000, 1672473600)\n",
    "nyc_2023 = nyc_lookup(1672560000, 1704009600)\n",
    "nyc_2024 = nyc_lookup(1704096000, 1707724800)\n",
    "nyc_pm2_5 = [nyc_2020, nyc_2021, nyc_2022, nyc_2023, nyc_2024]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cace4e38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[23.31635561160151,\n",
       " 17.246082864684972,\n",
       " 15.950486637880767,\n",
       " 17.542377039694514,\n",
       " 27.50828426395937]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nyc_pm2_5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35197056",
   "metadata": {},
   "source": [
    "### Step 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed9790d",
   "metadata": {},
   "source": [
    "This step is to create a dataframe from scratch, utilizing column and row names that match the lists created. I appeded the yearly data for each city to the dataframe in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "898a4da3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>5.920151</td>\n",
       "      <td>6.430009</td>\n",
       "      <td>7.476296</td>\n",
       "      <td>7.499211</td>\n",
       "      <td>6.58403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>12.274678</td>\n",
       "      <td>10.832322</td>\n",
       "      <td>9.986868</td>\n",
       "      <td>10.765146</td>\n",
       "      <td>14.876345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York City</th>\n",
       "      <td>23.316356</td>\n",
       "      <td>17.246083</td>\n",
       "      <td>15.950487</td>\n",
       "      <td>17.542377</td>\n",
       "      <td>27.508284</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    2020       2021       2022       2023       2024\n",
       "Seattle         5.920151   6.430009   7.476296   7.499211    6.58403\n",
       "Chicago        12.274678  10.832322   9.986868  10.765146  14.876345\n",
       "New York City  23.316356  17.246083  15.950487  17.542377  27.508284"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating blank dataframe and adding in all lists as rows\n",
    "\n",
    "df_api = pd.DataFrame(columns = ['2020', '2021', '2022', '2023', '2024'],\n",
    "                      index = ['Seattle', 'Chicago', 'New York City'])\n",
    "df_api.loc['Seattle'] = seattle_pm2_5\n",
    "df_api.loc['Chicago'] = chicago_pm2_5\n",
    "df_api.loc['New York City'] = nyc_pm2_5\n",
    "df_api"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3e5d02",
   "metadata": {},
   "source": [
    "### Step 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1aa81a5",
   "metadata": {},
   "source": [
    "This step is for formatting the data as necessary. I converted all columns in the dataframe to numeric, since the data points are objects from a list. I then rounded the numerical values to the tenths place. This makes the data easier to use and the format more comparable to other dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7754941a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020    object\n",
       "2021    object\n",
       "2022    object\n",
       "2023    object\n",
       "2024    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# before converting all columns to numeric\n",
    "\n",
    "df_api.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "10959c7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting all columns to numeric\n",
    "\n",
    "df_api['2020'] = pd.to_numeric(df_api['2020'])\n",
    "df_api['2021'] = pd.to_numeric(df_api['2021'])\n",
    "df_api['2022'] = pd.to_numeric(df_api['2022'])\n",
    "df_api['2023'] = pd.to_numeric(df_api['2023'])\n",
    "df_api['2024'] = pd.to_numeric(df_api['2024'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "faff183b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020    float64\n",
       "2021    float64\n",
       "2022    float64\n",
       "2023    float64\n",
       "2024    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after converting all columns to numeric\n",
    "\n",
    "df_api.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "510065d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>5.9</td>\n",
       "      <td>6.4</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>6.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>12.3</td>\n",
       "      <td>10.8</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>14.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York City</th>\n",
       "      <td>23.3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               2020  2021  2022  2023  2024\n",
       "Seattle         5.9   6.4   7.5   7.5   6.6\n",
       "Chicago        12.3  10.8  10.0  10.8  14.9\n",
       "New York City  23.3  17.2  16.0  17.5  27.5"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rounding all decimals to the tenths place\n",
    "\n",
    "df_api = df_api.round(1)\n",
    "df_api"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27200224",
   "metadata": {},
   "source": [
    "### Final API Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d4330f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>5.9</td>\n",
       "      <td>6.4</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>6.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>12.3</td>\n",
       "      <td>10.8</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>14.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York City</th>\n",
       "      <td>23.3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               2020  2021  2022  2023  2024\n",
       "Seattle         5.9   6.4   7.5   7.5   6.6\n",
       "Chicago        12.3  10.8  10.0  10.8  14.9\n",
       "New York City  23.3  17.2  16.0  17.5  27.5"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_api"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b83558d8",
   "metadata": {},
   "source": [
    "### Ethical Implications"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dff6189",
   "metadata": {},
   "source": [
    "There are a few ethical implications here when data wrangling the api source. There is extreme bias in selecting cities that may not represent accurate pollution trends, when compared to other regions around the world. I mostly selected a couple of famous cities that anyone can recognize. Addtionally, the timeframes are not the same range for each year, providing possible skewed results. The api I chose only goes back as far as the last two months of 2020, and the year 2024 is barely two months in. Therefore, the trends from year-to-year may not be entirely accurate for the years 2020-2024. For extracting the data from the API, I had to be creative since the API only returns one hour of data for each api search call. For each city, I wrote a function that searches historical data for each hour over an entire year, and appends these thousands of hourly data points to a temporary list. The function then takes the average of all hours in the year, and returns a yearly average. I called this function for each city for the years 2020-2024. I ran this function for the cities of Seattle, Chicago, and NYC for the first three steps. The following steps included combining and formatting the data into a useable dataframe. Overall, I decided to keep only the measured levels of the pollution variable pm2.5, for the comparison of famous American cities against other major regions around the world."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19106422",
   "metadata": {},
   "source": [
    "# Project Milestone 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a20566ea",
   "metadata": {},
   "source": [
    "### Dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7534a07a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3</th>\n",
       "      <th>CO</th>\n",
       "      <th>SO2</th>\n",
       "      <th>NO2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>525569</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.10</td>\n",
       "      <td>11.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525570</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.45</td>\n",
       "      <td>19.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525571</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.56</td>\n",
       "      <td>21.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525572</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>2.23</td>\n",
       "      <td>23.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525573</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.64</td>\n",
       "      <td>16.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Year  Month  Day    O3    CO   SO2    NO2\n",
       "525569  2018      1    1  0.01  0.27  0.10  11.66\n",
       "525570  2018      1    2  0.00  0.31  0.45  19.92\n",
       "525571  2018      1    3  0.00  0.32  0.56  21.20\n",
       "525572  2018      1    4  0.00  0.60  2.23  23.78\n",
       "525573  2018      1    8  0.01  0.32  0.64  16.30"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# flat file\n",
    "\n",
    "df_flat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fa210c9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Region</th>\n",
       "      <th>2022</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>70.9</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>66.6</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>65.8</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Kuwait</td>\n",
       "      <td>55.8</td>\n",
       "      <td>29.7</td>\n",
       "      <td>34.0</td>\n",
       "      <td>38.3</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>India</td>\n",
       "      <td>53.3</td>\n",
       "      <td>58.1</td>\n",
       "      <td>51.9</td>\n",
       "      <td>58.1</td>\n",
       "      <td>72.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Region  2022  2021  2020  2019  2018\n",
       "2    Pakistan  70.9  66.8  59.0  65.8  74.3\n",
       "3     Bahrain  66.6  49.8  39.7  46.8  59.8\n",
       "4  Bangladesh  65.8  76.9  77.1  83.3  97.1\n",
       "6      Kuwait  55.8  29.7  34.0  38.3  56.0\n",
       "7       India  53.3  58.1  51.9  58.1  72.5"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# website\n",
    "\n",
    "df_html.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "03dd70a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>5.9</td>\n",
       "      <td>6.4</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>6.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>12.3</td>\n",
       "      <td>10.8</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>14.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York City</th>\n",
       "      <td>23.3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               2020  2021  2022  2023  2024\n",
       "Seattle         5.9   6.4   7.5   7.5   6.6\n",
       "Chicago        12.3  10.8  10.0  10.8  14.9\n",
       "New York City  23.3  17.2  16.0  17.5  27.5"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# api\n",
    "\n",
    "df_api.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56038c2c",
   "metadata": {},
   "source": [
    "### Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "52bcfd74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_api.T.plot()\n",
    "mpl.legend(loc = 'upper left')\n",
    "mpl.title(\"Yearly Pollution by City\")\n",
    "mpl.xlabel(\"Year\")\n",
    "mpl.ylabel(\"Pollution (pm2.5)\")\n",
    "mpl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b91f826e",
   "metadata": {},
   "source": [
    "I plotted data from only the API dataframe to compare pollution level trends accross cities select. New York City has the highest level of pollution, although this heirarchy of pollution is also in line with the population of each city."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f0d2063b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_flat.groupby(\"Year\").mean().plot(y=[\"O3\", \"CO\", \"SO2\"], legend=True)\n",
    "mpl.legend(loc = 'upper right')\n",
    "mpl.title(\"Washington State Pollution by Year\")\n",
    "mpl.xlabel(\"Year\")\n",
    "mpl.ylabel(\"Pollution Level\")\n",
    "mpl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd54f48",
   "metadata": {},
   "source": [
    "I plotted data from only the flat file dataframe to compare pollutant molecule levels over the years. It seems that SO2 levels are delcining while CO and O3 levels are linear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fbb2d7a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_html.loc[:7].set_index(\"Region\").T.plot()\n",
    "mpl.legend(loc = 'upper left')\n",
    "mpl.title(\"Highest Polluted Region by Year\")\n",
    "mpl.xlabel(\"Year\")\n",
    "mpl.ylabel(\"Pollution (pm2.5)\")\n",
    "mpl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e64611d8",
   "metadata": {},
   "source": [
    "I plotted data from only the HTML dataframe to compare pollution levels across the top 5 most polluted regions in the world with full data available across the entire year range. So far, Bangladesh has probably the highest level of pollution in the world when comparing particulate matter levels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "101ff4ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_html.loc[:7].set_index(\"Region\").T.Bangladesh.plot()\n",
    "df_api.T.Seattle.plot()\n",
    "mpl.legend(loc = 'upper left')\n",
    "mpl.title(\"Home City vs Most Polluted Region\")\n",
    "mpl.xlabel(\"Year\")\n",
    "mpl.ylabel(\"Pollution (pm2.5)\")\n",
    "mpl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "464cfd88",
   "metadata": {},
   "source": [
    "I plotted data from 2 dataframes here. To compare the most pollution region in the world vs my home town. There is a near 10-fold difference in pollution, which is staggering."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "564f1fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_html.loc[:7].set_index(\"Region\").T.Kuwait.plot()\n",
    "df_api.T.Chicago.plot()\n",
    "mpl.legend(loc = 'upper left')\n",
    "mpl.title(\"Pollution of Regions With Similar Population\")\n",
    "mpl.xlabel(\"Year\")\n",
    "mpl.ylabel(\"Pollution (pm2.5)\")\n",
    "mpl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac0be2ab",
   "metadata": {},
   "source": [
    "I plotted data from 2 dataframes here. I compared Chicago and Kuwait because both regions has similar populations. There is a 4-fold difference in particulate matter pollution. This speaks to how important the infrastructure of a region is, especially when it comes to first and third world regions. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e39c8c51",
   "metadata": {},
   "source": [
    "### Storing the Data in SQL Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bcdba781",
   "metadata": {},
   "outputs": [],
   "source": [
    "# connect to SQL database through engine function\n",
    "\n",
    "engine = create_engine('sqlite://', echo = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f2214972",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# adding flat file dataframe to database\n",
    "df_flat.to_sql('FLAT',con = engine)\n",
    "\n",
    "# adding HTML dataframe to database\n",
    "df_html.to_sql('HTML',con = engine)\n",
    "\n",
    "# adding API dataframe to database\n",
    "df_api.to_sql('API',con = engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d40b78b9",
   "metadata": {},
   "source": [
    "### Calling and Merging the Data from SQL Databse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b96278cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calling flat file dataframe\n",
    "sql_flat = pd.read_sql('FLAT', con = engine)\n",
    "\n",
    "# calling HTML dataframe\n",
    "sql_html = pd.read_sql('HTML', con = engine)\n",
    "\n",
    "# calling API dataframe\n",
    "sql_api = pd.read_sql('API', con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e5c8fdbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>O3</th>\n",
       "      <th>CO</th>\n",
       "      <th>SO2</th>\n",
       "      <th>NO2</th>\n",
       "      <th>index</th>\n",
       "      <th>Region</th>\n",
       "      <th>...</th>\n",
       "      <th>2021</th>\n",
       "      <th>2020</th>\n",
       "      <th>2019</th>\n",
       "      <th>2018</th>\n",
       "      <th>index</th>\n",
       "      <th>2020</th>\n",
       "      <th>2021</th>\n",
       "      <th>2022</th>\n",
       "      <th>2023</th>\n",
       "      <th>2024</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>525569</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.10</td>\n",
       "      <td>11.66</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>...</td>\n",
       "      <td>66.8</td>\n",
       "      <td>59.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>74.3</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>5.9</td>\n",
       "      <td>6.4</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>6.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>525570</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.45</td>\n",
       "      <td>19.92</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Bahrain</td>\n",
       "      <td>...</td>\n",
       "      <td>49.8</td>\n",
       "      <td>39.7</td>\n",
       "      <td>46.8</td>\n",
       "      <td>59.8</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>12.3</td>\n",
       "      <td>10.8</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>14.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>525571</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.56</td>\n",
       "      <td>21.20</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>...</td>\n",
       "      <td>76.9</td>\n",
       "      <td>77.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>97.1</td>\n",
       "      <td>New York City</td>\n",
       "      <td>23.3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.5</td>\n",
       "      <td>27.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>525572</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>2.23</td>\n",
       "      <td>23.78</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Kuwait</td>\n",
       "      <td>...</td>\n",
       "      <td>29.7</td>\n",
       "      <td>34.0</td>\n",
       "      <td>38.3</td>\n",
       "      <td>56.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>525573</td>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.64</td>\n",
       "      <td>16.30</td>\n",
       "      <td>7.0</td>\n",
       "      <td>India</td>\n",
       "      <td>...</td>\n",
       "      <td>58.1</td>\n",
       "      <td>51.9</td>\n",
       "      <td>58.1</td>\n",
       "      <td>72.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    index  Year  Month  Day    O3    CO   SO2    NO2  index      Region  ...  \\\n",
       "0  525569  2018      1    1  0.01  0.27  0.10  11.66    2.0    Pakistan  ...   \n",
       "1  525570  2018      1    2  0.00  0.31  0.45  19.92    3.0     Bahrain  ...   \n",
       "2  525571  2018      1    3  0.00  0.32  0.56  21.20    4.0  Bangladesh  ...   \n",
       "3  525572  2018      1    4  0.00  0.60  2.23  23.78    6.0      Kuwait  ...   \n",
       "4  525573  2018      1    8  0.01  0.32  0.64  16.30    7.0       India  ...   \n",
       "\n",
       "   2021  2020  2019  2018          index  2020  2021  2022  2023  2024  \n",
       "0  66.8  59.0  65.8  74.3        Seattle   5.9   6.4   7.5   7.5   6.6  \n",
       "1  49.8  39.7  46.8  59.8        Chicago  12.3  10.8  10.0  10.8  14.9  \n",
       "2  76.9  77.1  83.3  97.1  New York City  23.3  17.2  16.0  17.5  27.5  \n",
       "3  29.7  34.0  38.3  56.0            NaN   NaN   NaN   NaN   NaN   NaN  \n",
       "4  58.1  51.9  58.1  72.5            NaN   NaN   NaN   NaN   NaN   NaN  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# merging all called dataframes from SQL database into one dataset\n",
    "\n",
    "sql_merge = pd.concat([sql_flat, sql_html, sql_api], axis=1)\n",
    "sql_merge.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80337129",
   "metadata": {},
   "source": [
    "### Project Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a098f8fd",
   "metadata": {},
   "source": [
    "Throughout the milestones, I’ve had to approach each data source differently for processing the data. For the flat file, I filtered by selecting my own city of interest. Simplifying the time range was the next step, where I took a summary of value counts for each year and determined with of the last several years had the most data points. The following steps were for determining NaN values, correct data types, and finalizing the data frame format. For the html source, I used a simple response library to get the data from my html url. This was converted to text, and then selected for the correct data frame. I kept only the necessary columns I needed for analysis and renamed as needed. I then deleted character values and converted all relevant columns to numeric. I finally removed entire rows that had any NaN values under any year column, to only keep complete data. For API data, my chosen API only returned one hour of data for each call. For each city, I used a function that pulls historical data for each hour over an entire year and appends these hourly data points to a temporary list. The average of all hours in the year was taken for a yearly average. I called this function for Seattle, Chicago, and NYC for the years 2020-2024. Overall, I decided to keep only the measured levels of the pollution variable pm2.5, for the comparison of these cities against other regions across the world. There are quite a few ethical implications when wrangling the data from the three different sources. For the flat file, I introduced personal bias through selecting my home. Washington is a clean state, not to mention the greenest and most natural in the country. For the html source, I left out entire regions for the sake of having complete data. This misrepresented any large, trends of pollution that would’ve included potentially influential regions. For the API source, there is once more personal bias in choosing to look at famous cities only. I believe that overall, the timeframe of pollution observations selected may not be the most ideal timeframes. The trends from year-to-year between 2018 to 2024 were obviously misleading due to the COVID pandemic. Due to lockdowns and a major slowdown of worldwide industries, there’s a major dip in pollution when the world was in the heart of the pandemic outbreak. Overall, the limited data is interesting when represented with visuals. It seems pretty much anywhere, from my hometown to other regions of the world, the levels of pollution are linear, with only a dip likely resulting from the COVID pandemic. There is no visible sharp increase in pollution levels, but at the same time there’s also no decrease which can be just as concerning. I concluded that a wider range of data would be far more helpful in determining a course of action to reduce pollution, or to successfully evaluate efforts to reduce pollution over recent years."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
